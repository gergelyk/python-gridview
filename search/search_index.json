{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GridView \u00b6 Visualize your 2D iterable. Usage examples \u00b6 Simple \u00b6 from gridview import GridView grid = [[ 1 , 2 , 3 ], [ 4 , 5 ], [ 6 , 7 , 8 , 9 ]] GridView ( grid ) . save ( 'simple.svg' ) Resulting image: Customized \u00b6 from gridview import GridView grid = [ [ 'Month' , 'Cost' , 'Notes' ], [ 'January' , 12.33 ], [ 'February' , 33.10 ], [ 'March' , 54.30 , 'Delayed.' ], [ 'April' , 22.12 ], [ 'May' , 31.41 ], [ 'June' , 41.36 , 'Delayed.' ], [ 'July' , 22.23 , 'Lost!' ], [ 'August' , 82.10 ], [ 'September' , 20.01 , 'Replaced.' ], [ 'October' , 55.20 ], [ 'November' , 34.23 ], [ 'December' , 33.52 ]] class Report ( GridView ): transpose = True def text ( self , e , x , y ): if x == 1 and y > 0 : return f '$ { e } ' def color ( self , e , x , y ): if y == 0 : return 'lightgray' if x == 0 : return 'lightyellow' if x == 1 : if e > 50 : return '#8888ff:too high' if e < 20 : return '#ffff88:too low' if x == 2 : if e . endswith ( '!' ): return '#ff8888' Report ( grid ) . save ( 'customized.svg' ) Resulting image: Object Oriented \u00b6 from gridview import GridView class Animal : def __init__ ( self , name ): self . _name = name def __str__ ( self ): return self . _name def color ( self ): return 'lightgreen' class Person : def __init__ ( self , name , * , male ): self . _name = name self . _male = male def __str__ ( self ): title = 'Sir' if self . _male else 'Madame' return f ' { title } \\n { self . _name } ' def color ( self ): return 'lightblue' grid = [[ None ] * 5 for n in range ( 6 )] grid [ 0 ][ 2 ] = Animal ( 'Ozzy' ) grid [ 4 ][ 1 ] = Animal ( 'Axel' ) grid [ 2 ][ 3 ] = Person ( 'Susana' , male = False ) grid [ 4 ][ 0 ] = Person ( 'Tom' , male = True ) grid [ 5 ][ 4 ] = Person ( 'James' , male = True ) class Report ( GridView ): flip_y = True default_color = '#ffeeee' def color ( self , e , x , y ): return e . color () def text ( self , e , x , y ): if e is None : return f 'x: { x } \\n y: { y } ' Report ( grid ) . save ( 'object_oriented.svg' ) Resulting image:","title":"Overview"},{"location":"#gridview","text":"Visualize your 2D iterable.","title":"GridView"},{"location":"#usage-examples","text":"","title":"Usage examples"},{"location":"#simple","text":"from gridview import GridView grid = [[ 1 , 2 , 3 ], [ 4 , 5 ], [ 6 , 7 , 8 , 9 ]] GridView ( grid ) . save ( 'simple.svg' ) Resulting image:","title":"Simple"},{"location":"#customized","text":"from gridview import GridView grid = [ [ 'Month' , 'Cost' , 'Notes' ], [ 'January' , 12.33 ], [ 'February' , 33.10 ], [ 'March' , 54.30 , 'Delayed.' ], [ 'April' , 22.12 ], [ 'May' , 31.41 ], [ 'June' , 41.36 , 'Delayed.' ], [ 'July' , 22.23 , 'Lost!' ], [ 'August' , 82.10 ], [ 'September' , 20.01 , 'Replaced.' ], [ 'October' , 55.20 ], [ 'November' , 34.23 ], [ 'December' , 33.52 ]] class Report ( GridView ): transpose = True def text ( self , e , x , y ): if x == 1 and y > 0 : return f '$ { e } ' def color ( self , e , x , y ): if y == 0 : return 'lightgray' if x == 0 : return 'lightyellow' if x == 1 : if e > 50 : return '#8888ff:too high' if e < 20 : return '#ffff88:too low' if x == 2 : if e . endswith ( '!' ): return '#ff8888' Report ( grid ) . save ( 'customized.svg' ) Resulting image:","title":"Customized"},{"location":"#object-oriented","text":"from gridview import GridView class Animal : def __init__ ( self , name ): self . _name = name def __str__ ( self ): return self . _name def color ( self ): return 'lightgreen' class Person : def __init__ ( self , name , * , male ): self . _name = name self . _male = male def __str__ ( self ): title = 'Sir' if self . _male else 'Madame' return f ' { title } \\n { self . _name } ' def color ( self ): return 'lightblue' grid = [[ None ] * 5 for n in range ( 6 )] grid [ 0 ][ 2 ] = Animal ( 'Ozzy' ) grid [ 4 ][ 1 ] = Animal ( 'Axel' ) grid [ 2 ][ 3 ] = Person ( 'Susana' , male = False ) grid [ 4 ][ 0 ] = Person ( 'Tom' , male = True ) grid [ 5 ][ 4 ] = Person ( 'James' , male = True ) class Report ( GridView ): flip_y = True default_color = '#ffeeee' def color ( self , e , x , y ): return e . color () def text ( self , e , x , y ): if e is None : return f 'x: { x } \\n y: { y } ' Report ( grid ) . save ( 'object_oriented.svg' ) Resulting image:","title":"Object Oriented"},{"location":"api/","text":"API \u00b6 \u00b6 Render dwo dimensional iterable into customized SVG image. debug class-attribute \u00b6 Raise an exception if any element fails to provide color or text. default_color class-attribute \u00b6 Color to be used when color(e, x, y) raises or returns None . default_text class-attribute \u00b6 Text to be used when text(e, x, y) raises. flip_x class-attribute \u00b6 Whether or not to flip X axis. flip_y class-attribute \u00b6 Whether or not to flip Y axis. legend class-attribute \u00b6 Whether or not to display legend. If legend is empty, it will be hidden anyway. transpose class-attribute \u00b6 Whether or not to transpose entire data set. __init__ ( self , target ) special \u00b6 If target iterable target is mutable, it can be modified after creating instance of this class. Source code in gridview/gridview.py 42 43 44 def __init__ ( self , target ): \"\"\"If target iterable `target` is mutable, it can be modified after creating instance of this class.\"\"\" self . _target = target color ( self , e , x , y ) \u00b6 Abstract method that returns color assigned to element e . Coordinates are provided as x and y . Color should be HTML compatible, (e.g. '#ff0000' or 'red' ). Optionally color can be suffixed with label that builds up legend, e.g. '#ff0000:foobar' . If raises or returns None , default_color will be used. Source code in gridview/gridview.py 64 65 66 67 def color ( self , e , x , y ): \"\"\"Abstract method that returns color assigned to element `e`. Coordinates are provided as `x` and `y`. Color should be HTML compatible, (e.g. `'#ff0000'` or `'red'`). Optionally color can be suffixed with label that builds up legend, e.g. `'#ff0000:foobar'`. If raises or returns `None`, `default_color` will be used. \"\"\" return None save ( self , path ) \u00b6 Save SVG image into path . Source code in gridview/gridview.py 46 47 48 49 50 51 52 53 54 55 56 57 58 def save ( self , path ): \"\"\"Save SVG image into `path`.\"\"\" grid , styles , max_text_size = self . _wrap_elements () legend_items , max_label_width = self . _build_legend ( styles ) grid_cols = len ( grid ) grid_rows = max ( len ( column ) for column in grid ) if self . transpose : grid_cols , grid_rows = grid_rows , grid_cols dim = Dimensions ( grid_cols , grid_rows , max_text_size , max_label_width , legend_items ) dwg_size = ( dim . image_width , dim . image_height ) dwg , dwg_styles = self . _new_dwg ( dim , styles , path , size = dwg_size ) self . _draw_grid ( dwg , dim , dwg_styles , grid , legend_items ) dwg . save () text ( self , e , x , y ) \u00b6 Abstract method that returns stringified version of element e . Coordinates are provided as x and y . If raises, default_text will be used. If returns None , str(e) will be used. Source code in gridview/gridview.py 60 61 62 def text ( self , e , x , y ): \"\"\"Abstract method that returns stringified version of element `e`. Coordinates are provided as `x` and `y`. If raises, `default_text` will be used. If returns `None`, `str(e)` will be used.\"\"\" return None","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#gridview.gridview.GridView","text":"Render dwo dimensional iterable into customized SVG image.","title":"gridview.gridview.GridView"},{"location":"api/#gridview.gridview.GridView.debug","text":"Raise an exception if any element fails to provide color or text.","title":"debug"},{"location":"api/#gridview.gridview.GridView.default_color","text":"Color to be used when color(e, x, y) raises or returns None .","title":"default_color"},{"location":"api/#gridview.gridview.GridView.default_text","text":"Text to be used when text(e, x, y) raises.","title":"default_text"},{"location":"api/#gridview.gridview.GridView.flip_x","text":"Whether or not to flip X axis.","title":"flip_x"},{"location":"api/#gridview.gridview.GridView.flip_y","text":"Whether or not to flip Y axis.","title":"flip_y"},{"location":"api/#gridview.gridview.GridView.legend","text":"Whether or not to display legend. If legend is empty, it will be hidden anyway.","title":"legend"},{"location":"api/#gridview.gridview.GridView.transpose","text":"Whether or not to transpose entire data set.","title":"transpose"},{"location":"api/#gridview.gridview.GridView.__init__","text":"If target iterable target is mutable, it can be modified after creating instance of this class. Source code in gridview/gridview.py 42 43 44 def __init__ ( self , target ): \"\"\"If target iterable `target` is mutable, it can be modified after creating instance of this class.\"\"\" self . _target = target","title":"__init__()"},{"location":"api/#gridview.gridview.GridView.color","text":"Abstract method that returns color assigned to element e . Coordinates are provided as x and y . Color should be HTML compatible, (e.g. '#ff0000' or 'red' ). Optionally color can be suffixed with label that builds up legend, e.g. '#ff0000:foobar' . If raises or returns None , default_color will be used. Source code in gridview/gridview.py 64 65 66 67 def color ( self , e , x , y ): \"\"\"Abstract method that returns color assigned to element `e`. Coordinates are provided as `x` and `y`. Color should be HTML compatible, (e.g. `'#ff0000'` or `'red'`). Optionally color can be suffixed with label that builds up legend, e.g. `'#ff0000:foobar'`. If raises or returns `None`, `default_color` will be used. \"\"\" return None","title":"color()"},{"location":"api/#gridview.gridview.GridView.save","text":"Save SVG image into path . Source code in gridview/gridview.py 46 47 48 49 50 51 52 53 54 55 56 57 58 def save ( self , path ): \"\"\"Save SVG image into `path`.\"\"\" grid , styles , max_text_size = self . _wrap_elements () legend_items , max_label_width = self . _build_legend ( styles ) grid_cols = len ( grid ) grid_rows = max ( len ( column ) for column in grid ) if self . transpose : grid_cols , grid_rows = grid_rows , grid_cols dim = Dimensions ( grid_cols , grid_rows , max_text_size , max_label_width , legend_items ) dwg_size = ( dim . image_width , dim . image_height ) dwg , dwg_styles = self . _new_dwg ( dim , styles , path , size = dwg_size ) self . _draw_grid ( dwg , dim , dwg_styles , grid , legend_items ) dwg . save ()","title":"save()"},{"location":"api/#gridview.gridview.GridView.text","text":"Abstract method that returns stringified version of element e . Coordinates are provided as x and y . If raises, default_text will be used. If returns None , str(e) will be used. Source code in gridview/gridview.py 60 61 62 def text ( self , e , x , y ): \"\"\"Abstract method that returns stringified version of element `e`. Coordinates are provided as `x` and `y`. If raises, `default_text` will be used. If returns `None`, `str(e)` will be used.\"\"\" return None","title":"text()"}]}